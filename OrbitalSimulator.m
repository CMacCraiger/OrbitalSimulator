function [] = OrbitalSimulator
filename = 'Orbit.gif';
ERad = 6.371e6;
mu = 3.986004418e14;
valPeri = 382.5e3;
valApa = 382.5e3;
a = (valPeri+valApa + 2*ERad)/2;
Inc = 51.6;
[X,Y,Z] = OrbitalCalc(valPeri,valApa,Inc);
UI_main = figure(...
    'Units','Normalized',...
    'Position',[0.2,0.2,0.6,0.6],...
    'Color','k',...
    'MenuBar','none');
temp = load('Earth_Colour_Val.mat','topo');
texMap = temp.topo;

InstrucFont = 0.35;

Title = uicontrol(...
    'Style','text',...
    'Units','Normalized',...
    'fontUnits','Normalized',...
    'ForegroundColor','white',...
    'BackgroundColor','black',...
    'Position',[0.25,0.85,0.5,0.1],...
    'String','Orbit Simulator');
ButtonPlotOrbit = uicontrol(...
    'Style','pushbutton',...
    'String','Model Orbit',...
    'Units','Normalized',...
    'fontUnits','Normalized',...
    'ForegroundColor','white',...
    'BackgroundColor','red',...
    'Position',[0.12,0.1,0.3,0.1],...
    'Callback',@Callback_PlotOrbit);
InstrucPerigee = uicontrol(...
    'Style','text',...
    'Units','Normalized',...
    'fontUnits','Normalized',...
    'FontSize',InstrucFont,...
    'ForegroundColor','white',...
    'BackgroundColor','black',...
    'Position',[0.1,0.5,0.15,0.1],...
    'Tooltip','The closest point to Earth in the Orbit',...
    'String','Perigee Altitude');
NumPerigee = uicontrol(...
    'Style','edit',...
    'Units','Normalized',...
    'fontUnits','Normalized',...
    'Position',[0.25,0.535,0.1,0.09],...
    'Tooltip','The closest point to Earth in the Orbit',...
    'String','382.5',...
    'Callback',@Callback_Perigee);
InstrucInclination = uicontrol(...
    'Style','text',...
    'Units','Normalized',...
    'fontUnits','Normalized',...
    'FontSize',InstrucFont,...
    'ForegroundColor','white',...
    'BackgroundColor','black',...
    'Tooltip','How much the orbit is angled from the Equatorial Plane',...
    'Position',[0.1,0.4,0.15,0.1],...
    'String','Inclination');
NumInclination = uicontrol(...
    'Style','edit',...
    'Units','Normalized',...
    'fontUnits','Normalized',...
    'Position',[0.25,0.435,0.1,0.09],...
    'Tooltip','How much the orbit is angled from the Equatorial Plane',...
    'String','51.6',...
    'Callback',@Callback_Inclination);
InstrucApogee = uicontrol(...
    'Style','text',...
    'Units','Normalized',...
    'fontUnits','Normalized',...
    'FontSize',InstrucFont,...
    'ForegroundColor','white',...
    'BackgroundColor','black',...
    'Position',[0.1,0.3,0.15,0.1],...
    'Tooltip','The farthest point to Earth in the Orbit',...
    'String','Apogee Altitude');
NumApogee = uicontrol(...
    'Style','edit',...
    'Units','Normalized',...
    'fontUnits','Normalized',...
    'Position',[0.25,0.335,0.1,0.09],...
    'Tooltip','The farthest point to Earth in the Orbit',...
    'String','382.5',...
    'Callback',@Callback_Apogee);
% Rotate graph Counter Clockwise
spinCounter = uicontrol(...
    'Style','pushbutton',...
    'String','(>)',...
    'Units','Normalized',...
    'FontSize',5,...
    'fontunits','Normalized',...
    'Position',[0.925,0.1,0.02,0.05],...
    'Callback',@Countercallback);
% rotates the graph Clocwise
spinClock = uicontrol(...
    'Style','pushbutton',...
    'String','(<)',...
    'Units','Normalized',...
    'FontSize',5,...
    'fontunits','Normalized',...
    'Position',[0.875,0.1,0.02,0.05],...
    'Callback',@Clockcallback);
spinUp = uicontrol(...
    'Style','pushbutton',...
    'String','/\',...
    'Units','Normalized',...
    'FontSize',5,...
    'fontunits','Normalized',...
    'Position',[0.9,0.15,0.02,0.05],...
    'Callback',@Upcallback);
spinDown = uicontrol(...
    'Style','pushbutton',...
    'String','\/',...
    'Units','Normalized',...
    'FontSize',5,...
    'fontunits','Normalized',...
    'Position',[0.9,0.05,0.02,0.05],...
    'Callback',@Downcallback);
spinDown = uicontrol(...
    'Style','pushbutton',...
    'String','R',...
    'Units','Normalized',...
    'FontSize',5,...
    'fontunits','Normalized',...
    'Position',[0.9,0.1,0.02,0.05],...
    'Callback',@Resetcallback);

% graph position
graphPos = [0.32,0.1,0.75,0.75];
axhan1 = axes(...
    'Visible','on',...
    'Position', graphPos);
axis vis3d
axis off
hold on

scale = [-1 1]*1e7;
xlim(scale)
ylim(scale)
zlim(scale)
az = 160;
el = 30;
view([az,el])

[sX,sY,sZ] = sphere(256);
sX = sX*ERad;
sY = sY*ERad;
sZ = sZ*ERad;
SUN = light;
SUN.Style = 'infinite';
SUN.Position = [0 1 0];
pEarth = surf(sX,sY,sZ,'Edgecolor','none',...
    'CData',texMap,...
    'FaceColor','texturemap',...
    'FaceLighting','gouraud');
material dull
pOrb = plot3(X,Y,Z,'Color',[1 0 0]);
uiwait(UI_main)

    function Callback_Perigee(hObject,eventdata)
        if isempty(str2double(hObject.String))
            hObject.String = 0;
            warndlg('Input must be numerical');
        elseif length(str2double(hObject.String)) > 1
            hObject.String = 0;
            warndlg('Input must be a single value')
        elseif ~isreal(str2double(hObject.String))
            hObject.String = 0;
            warndlg('Input must be real')
        elseif hObject.String < 0
            hObject.String = 0;
            warndlg('Input Positive altitudes only')
        else
            delete(pOrb)
            valPeri = str2double(hObject.String)*1e3;
            [X,Y,Z] = OrbitalCalc(valPeri,valApa,Inc);
            pOrb = plot3(X,Y,Z,'Color',[1 0 0]);
        end
    end

    function Callback_Inclination(hObject,eventdata)
        if isempty(str2double(hObject.String))
            hObject.String = 0;
            warndlg('Input must be numerical');
        elseif length(str2double(hObject.String)) > 1
            hObject.String = 0;
            warndlg('Input must be a single value')
        elseif ~isreal(str2double(hObject.String))
            hObject.String = 0;
            warndlg('Input must be real')
        elseif (str2double(hObject.String) > 180)
            hObject.String = 0;
            warndlg('Inclination must be between 0 and 180')
        elseif (str2double(hObject.String) < 0)
            hObject.String = 0;
            warndlg('Inclination must be between 0 and 180')
        else
            delete(pOrb)
            Inc = str2double(hObject.String);
            [X,Y,Z] = OrbitalCalc(valPeri,valApa,Inc);
            pOrb = plot3(X,Y,Z,'Color',[1 0 0]);
        end
    end

    function Callback_Apogee(hObject,eventdata)
        if isempty(str2double(hObject.String))
            hObject.String = 0;
            warndlg('Input must be numerical');
        elseif length(str2double(hObject.String)) > 1
            hObject.String = 0;
            warndlg('Input must be a single value')
        elseif ~isreal(str2double(hObject.String))
            hObject.String = 0;
            warndlg('Input must be real')
        elseif hObject.String < 0
            hObject.String = 0;
            warndlg('Input Positive altitudes only')
        else
            delete(pOrb)
            valApa = str2double(hObject.String)*1e3;
            [X,Y,Z] = OrbitalCalc(valPeri,valApa,Inc);
            pOrb = plot3(X,Y,Z,'Color',[1 0 0]);
        end
    end

    function Callback_PlotOrbit(hObject,eventdata)
        NumInclination.Enable = 'off';
        NumPerigee.Enable = 'off';
        NumApogee.Enable = 'off';
        P = 2*pi*sqrt((a^3)/mu);
        Pr = round(P,-2);
        tInc = 50;
        EarthRot = ((360)/(86164.1))*tInc;
        % Number of Orbits
        for n = 1:1
            for i = 1:tInc:Pr
                pInt = plot3(X(i),Y(i),Z(i),'go');
                rotate(pEarth,[0 0 1],EarthRot)
                pause(0)
                frame = getframe(UI_main);
                im = frame2im(frame);
                [imind,cm] = rgb2ind(im,256);
                
                % Write to the GIF File
                if i == 1
                    imwrite(imind,cm,filename,'gif', 'Loopcount',inf,'DelayTime',0.09);
                else
                    imwrite(imind,cm,filename,'gif','WriteMode','append','DelayTime',0.09);
                end
                delete(pInt)
            end
            NumInclination.Enable = 'on';
            NumPerigee.Enable = 'on';
            NumApogee.Enable = 'on';
        end
    end
    function Countercallback(hObject,eventdata)
        az = az + 15;
        view([az,el])
    end
    function Clockcallback(hObject,eventdata)
        az = az - 15;
        view([az,el])
    end
    function Upcallback(hObject,eventdata)
        el = el + 10;
        if el >90
            el = 90;
        end
        view([az,el])
    end
    function Downcallback(hObject,eventdata)
        el = el - 10;
        if el < (-90)
            el = -90;
        end
        view([az,el])
    end
    function Resetcallback(hObject,eventdata)
        az = 160;
        el = 30;
        view([az,el])
    end
end